#!/usr/bin/perl -w

use strict;
use warnings;

use IPC::Run qw(harness run);
use String::ShellQuote;

my %qsubargs = (
       '-a' => 1, '-b' => 1, '-cwd' => 0, '-e' => 1, '-hard' => 0, '-i' => 1, '-j' => 1,
       '-l' => 1, '-now' => 1, '-N' => 1, '-o' => 1, '-p' => 1, '-q' => 1, '-soft' => 0,
       '-sync' => 1, '-v' => 1, '-wd' => 1,
       '-mem' => 1, '-once' => 0, '-stderr' => 0, '-continuous' => 0, '-quiet' => 0,
       '-umask' => 1,
);
my %qsargs;
my @args;
my $memory = memparse_kb('256M');
my $once = 0;
my $stderr = 0;
my $continuous = 0;
my $quiet = 0;
my $script = $0;
my $queue = 'task';
$script = $1 if $script =~ m{/([^/]+)$};

sub memparse_kb {
  # parses an XXK, XXm, XXg to the # of kilobytes
  my $arg = $_[0];
  if ($arg !~ m/^([1-9][0-9]*)([mgk])$/i) {
    die "$script: memory value must be an integer followed by 'k', 'm' or 'g': $_[0]\n";
  }

  my $amount = $1;
  my $unit = $2;
  if($unit =~ m/[mg]/i) {$amount *= 1024};
  if($unit =~ m/[g]/i) {$amount *= 1024};

  return $amount;
}

# Set default umask for output files depending on whether we're called
# by a user or a tool.
my $umask = $> >= 50000 ? oct ('007') : oct ('077');

$continuous = $once = 1 if ($script eq 'jstart');
$once = 1 if $script eq 'qcronsub';

my @options;
while($#ARGV > 0) {
  last unless defined $qsubargs{$ARGV[0]};
  my $opt = shift;
  my $optarg = undef;
  if($qsubargs{$opt}) {
    die "$script: option $opt requires an argument\n" unless $#ARGV > 0;
    $optarg = shift;
  }
  push @options, [ $opt, $optarg ];
}


if($#ARGV<0 or $ARGV[0] =~ m/^-/) {
  print STDERR <<"END"

usage: $script [options...] program [arg...]

Options include many (but not all) qsub options, along with:
 -stderr           Send errors to stderr rather than the error
                   output file.
 -mem <value>      Request <value> amount of memory for the job.
                   (number prefixed by 'k', 'm' or 'g')
 -once             Only start one job with that name, fail if
                   another is already started or queued (default
                   if invoked as 'jstart' or 'qcronsub').
 -continuous       Start a self-restarting job on the continuous
                   queue (default if invoked as 'jstart')
 -umask <value>    Set umask for output files if they don't exist
 -quiet            If successful, don't output anything

Unlike qsub, if you do not specify output and error files, output is appended
by default to files named <job>.err and <job>.out in your home directory
(without job numbers), including errors from starting the job itself.

Additionally, you need to provide an executable on the command line,
$script will not read a script from standard input.

END
  ;
  exit 1;
}

my $exe = shift;
my $prog = `/usr/bin/which $exe`;
chomp $prog;
while(-l $prog) {
  my $symlink = readlink $prog;
  if($symlink =~ m{^/}) {
    $prog = $symlink;
    next;
  }
  $prog =~ s{/[^/]+$}{};
  while($symlink =~ m{^\.\./(.*)}) {
    $symlink = $1;
    $prog =~ s{/[^/]+$}{};
  }
  $prog .= "/$symlink";
}

unless($prog =~ m{^/}) {
  my $cwd = `pwd`;
  chomp $cwd;
  $prog = "$cwd/$exe";
  $prog =~ s{/\./}{/}g;
}

open EXE, "<$prog" or die "$prog: $!\n";
my $shebang;
while(read EXE, $shebang, 2) {
  last unless $shebang =~ m/^#[!\$]/;
  my $rest =<EXE>;
  next if $shebang eq '#!';
  next unless $rest =~ m/\s* ( -\S+ ) (?: \s+ ( [^# \n\t]+ ) )?/x;
  unshift @options, [ $1, $2 ];
}
close EXE;


foreach my $option (@options) {
  my($opt, $optval) = @$option;
  if($opt eq '-mem') {
    $memory = memparse_kb($optval);
  } elsif($opt eq '-once') {
    $once = 1;
  } elsif($opt eq '-stderr') {
    $stderr = 1;
  } elsif($opt eq '-continuous') {
    $continuous = 1;
    $once = 1;
  } elsif($opt eq '-umask') {
    die ("$script: umask must be an octal value: $optval\n")
      unless ($optval =~ /^[0-7]+$/);
    $umask = oct ($optval);
  } elsif($opt eq '-quiet') {
    $quiet = 1;
  } else {
    if($opt eq '-l') {
      $memory = memparse_kb($1) if $optval =~ s/h_vmem=([0-9]+[mMgGkK]),?//;
      if ($optval =~ s/virtual_free=([0-9]+[mMgGkK]),?//) {
        my $vfmem = memparse_kb($1);
        if ($vfmem > $memory) {
            my $new_mem = $vfmem * 1.1;
            print "WARNING: virtual_free=${vfmem}k is larger than h_vmem=${memory}k. Setting h_vmem=${new_mem}k\n";
            $memory = $new_mem;
        }
      }
      next if $optval =~ m/^,?$/;
    }
    $qsargs{$opt} = $optval;
    next if $opt eq '-N' or $opt eq '-q' or $opt eq '-b';
    push @args, $opt;
    push @args, $optval if defined $optval;
  }
}

my $jobname = 'unknown';
$jobname = $1 if $prog =~ m{([^/.]+)(\.[^/]*)?$};
$jobname = $qsargs{'-N'} if defined $qsargs{'-N'};

my $err = (getpwuid ($<)) [7] . '/' . $jobname . '.err';
my $out = (getpwuid ($<)) [7] . '/' . $jobname . '.out';

$err = $qsargs{'-e'} if defined $qsargs{'-e'};
$out = $qsargs{'-o'} if defined $qsargs{'-o'};
$err = $out if defined $qsargs{'-j'} and $qsargs{'-j'} =~ m/^[yY]/;

# For STDOUT and STDERR we do the same dance:
# - If the output file exists, we do nothing (the output file being a
#   directory is a subset of this).
# - Otherwise, we touch the output file once with the set umask.
# - If -stderr is not given and the error output file is not a
#   directory, we redirect STDERR to it.
my $oldumask = umask ($umask);
if (!-e $out) {
  open (my $tempfh, '>>', $out) or
    die ("Couldn't touch '$out': $!");
  close ($tempfh);
}
if (!-e $err) {
  open (my $tempfh, '>>', $err) or
    die ("Couldn't touch '$err': $!");
  close ($tempfh);
}
if (!$stderr && !-d $err) {
  open (STDERR, '>>', $err) or
    die ("Couldn't redirect STDERR to '$err': $!");
}
umask ($oldumask);

my $now = localtime;

die "\[$now\] $prog: not an executable file\n" unless -f $prog and -x $prog;

if($once) {
  my $running = system "/usr/local/bin/job", '-q', $jobname;
  die "\[$now\] unable to get job status\n" if $running & 127;
  $running >>= 8;
  die "\[$now\] there is a job named '$jobname' already active\n" unless $running==0;
}

push @args, '-e', $err unless defined $qsargs{'-e'};
push @args, '-o', $out unless defined $qsargs{'-o'};
push @args, '-N', $jobname, '-hard', '-l', "h_vmem=${memory}k";

my ($qsubinput, $qsuboutput, $qsuberror);

if($continuous) {
  push @args, '-q', 'continuous';
  push @args, '-b', $qsargs{'-b'} if defined $qsargs{'-b'};
  $qsubinput = "#!/bin/bash\n"                                   .
               "while ! " . shell_quote($prog, @ARGV) . "; do\n" .
               "  sleep 5\n"                                     .
               "done\n";
} else {
  $qsubinput = '';
  $queue = $qsargs{'-q'} if defined $qsargs{'-q'};
  push @args, '-q', $queue, '-b', 'y', $prog, @ARGV;
}

my $h = harness(['/usr/bin/qsub', @args], \$qsubinput, \$qsuboutput, \$qsuberror);
if (!run ($h)) {
    print STDOUT $qsuboutput;
    print STDERR $qsuberror;
    exit ($h->result ());
}

# Suppress output if the user requested so.
if (!$quiet) {
    print STDOUT $qsuboutput;
    print STDERR $qsuberror;
}
