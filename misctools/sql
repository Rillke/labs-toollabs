#!/usr/bin/python3
#
# Copyright (C) 2017  Tim Landscheidt
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import logging
import os
import os.path
import socket
import sys

parser = argparse.ArgumentParser(description='Connect to or run SQL query ' +
                                 'on replica or Tools database server',
                                 epilog='Report bugs to Phabricator: ' +
                                 'https://phabricator.wikimedia.org')
parser.add_argument('-v', '--verbose', action='store_true', default=False,
                    help='show debugging information')
parser.add_argument('dbname', metavar='DATABASE NAME|WIKI NAME',
                    help='for example commonswiki_p or enwiki')
parser.add_argument('sqlquery', metavar='SQL QUERY', nargs=argparse.REMAINDER,
                    help='SQL query; multiple words will be joined by spaces')

args = parser.parse_args()

# Set up logging.
logging.basicConfig(stream=sys.stderr,
                    format='%(message)s',
                    level=logging.DEBUG if args.verbose else logging.WARN)

exec_args = ['mysql']

if os.path.isfile(os.path.expanduser('~/replica.my.cnf')):
    exec_args += ['--defaults-file=' + os.path.expanduser('~/replica.my.cnf')]
elif not(os.path.isfile(os.path.expanduser('~/.my.cnf'))):
    exec_args += ['-p']
    logging.warn('There is no configuration file for mysql to use, ' +
                 'you will probably be unable to access the database')

# These aliases have historically been supported; no new ones should
# be added here.
if args.dbname in ['commons', 'cs', 'de', 'en', 'fr', 'wikidata']:
    server = args.dbname + 'wiki.labsdb'
    db = args.dbname + 'wiki_p'
elif args.dbname in ['meta', 'meta_p']:
    # https://wikitech.wikimedia.org/wiki/Help:Tool_Labs/Database#Metadata_database;
    # not to be confused with metawiki_p.
    server = 's7.labsdb'
    db = 'meta_p'
elif args.dbname == 'local':
    server = 'tools-db'
    db = None
else:
    logging.debug('This database name is not hardcoded, ' +
                  'falling back to DNS resolution')
    if args.dbname.endswith('_p'):
        db = args.dbname
    else:
        db = args.dbname + '_p'
    server = db[:- len('_p')] + '.labsdb'
    try:
        socket.gethostbyname(server)
        logging.debug('Resolved to %s %s', server, db)
    except socket.gaierror:
        errmsg = 'Could not find requested database'
        if db != args.dbname:
            errmsg += "\nMake sure to ask for a db in format of <wiki>_p"
        sys.exit(errmsg)

logging.debug('Connecting to %s', server)
exec_args += ['-h', server]
if db:
    exec_args += [db]

if args.sqlquery:
    if len(args.sqlquery) > 1:
        logging.warn('More than one argument given; ' +
                     'joining SQL query words with spaces.')
    exec_args += ['-e', ' '.join(args.sqlquery)]

os.execvp('mysql', exec_args)
